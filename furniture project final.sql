#                                                         FURNITURE PROJECT  
create database projects;
use projects;
select * from furniture_data;
desc furniture;
#                                                          DATA CLEANING
# deleting duplicates
create table furniture_data as(
select * from furniture
union
select * from furniture);

   -- this will create a table with unique records. 
   
select * from furniture_data;


set sql_safe_updates=0;


# deleting null values 
  delete from furniture_data 
  where producttitle is null
  or originalprice is null
  or price is null
  or sold is null
  or tagtext is null;
  
# checking the table formats 
desc furniture_data;
      -- here we can see that datatype of original price column is text whereas it should be float.
              -- first of all the commas in the data should be replaced by empty space 
              update  furniture_data
              set originalprice=replace(originalprice,",","");
              -- now we will update the emply values with null values 
              update furniture_data
              set originalprice=null
              where originalprice='';
              -- now we will alter the datatype of original column 
              alter table furniture_data
              modify column originalprice float;
              
              -- There are some different values of some rows in tag text column where shipping was not free. 
              update furniture_data 
              set tagtext="Paid shipping"
              where tagtext !="free shipping";
              
              -- Altering the datatype of price column. 
              alter table furniture_data 
              modify column price float;
			
              -- Since the datatype of the column has changed, we will replace the null values with zero
              update furniture_data
              set originalprice=0
              where originalprice is null;
              
              
              
#                                                                    INSIGHTS 
# BASIC OVERVIEW
   -- TOTAL DISTINCT PRODUCTS 
      select distinct(producttitle) as unique_products from furniture_data;
   -- products where original price is given 
      select producttitle from furniture_data 
      where originalprice !=0;
      
# PRICING ANALYSIS 
   -- Most 10 expensive products 
   select producttitle,price from furniture_data 
   order by price desc 
   limit 10;
   -- least 10 expensive products 
   select producttitle,price from furniture_data 
   order by price 
   limit 10;
   -- average discount (where original price is given)
   select producttitle,originalprice,price,round((originalprice-price)/originalprice*100,1) as discount_percentage 
   from furniture_data where originalprice != 0;
   
# SALES PERFORMANCE 
   -- Best selling products 
   select producttitle,sold from furniture_data 
   order by sold desc
   limit 10;

   -- least selling products or no sale 
   select producttitle,sold from furniture_data 
   order by sold 
   limit 10;
   -- price range by sales 
   select 
   case
   when price <50 then "low price"
   when price>50 and price<250 then "medium price"
   when price >200 then "high price"
   end as product_category,
   count(*) as product_count,
   sum(sold) as total_units_sold
   from furniture_data
   group by product_category
   order by total_units_sold desc;
   
# REVENUE INSIGHTS 
   --  total revenue generated by each product 
   select producttitle,price,sold,ceil(price*sold)
   as total_revenue 
   from furniture_data;
   -- identifying the top products contributing most to the revenue. 
   select producttitle,ceil(price*sold)
   as total_revenue 
   from furniture_data
   order by total_revenue desc
   limit 10;
   -- compare revenue from discounted V/S non-discounted items.
    select case
    when originalprice is not null and originalprice>price then "discounted"
    else "not discounted"
    end as discount_category,
    count(*) as product_count,
    floor(sum(price*sold)) as total_revenue
    from furniture_data 
    group by discount_category;
    
# CATEGORY BASED TRENDS 
    -- analysis based on demand of the product 
    select producttitle,sold,case
    when sold >=(select avg(sold) from furniture) then "high demand"
    else "low demand"
    end as product_demand 
    from furniture_data;
    
# SHIPPING IMPACT 
    -- comparing price distribution for products with different tagtext values.
    select tagtext,ceil(sum(price)) as total_sum_of_price from furniture_data
    group by tagtext;
